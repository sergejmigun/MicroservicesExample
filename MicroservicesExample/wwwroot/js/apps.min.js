angular.module("cartApp", ['layoutApp', 'common']);
//# sourceMappingURL=app.js.map
//# sourceMappingURL=cart.controller.def.js.map
angular.module("cartApp").controller("cartController", [
    '$scope',
    '$rootScope',
    'cartService',
    function ($scope, $rootScope, cartService) {
        $scope.layout.activePage = 'cart';
        function initCartView() {
            cartService.getCart().then(function (cart) {
                $scope.orderedItems = cart;
            });
        }
        $scope.$on('onAddProduct', function (arg, item) {
            cartService.addToCart(item.id, item.quantity).then(initCartView);
        });
        $scope.$on('onRemoveOrderedItem', function (arg, item) {
            cartService.removeCartItem(item.productId).then(initCartView);
        });
        $scope.$on('onChangeQuantity', function (arg, item) {
            cartService.updateCartItem(item.productId, item.quantity);
        });
        $scope.$on('onCustomerCompleted', function (arg, item) {
            $scope.orderedItems.customer = item;
            cartService.processOrder($scope.orderedItems).then(initCartView);
            $('#completeCustomerModal').modal('toggle');
        });
        initCartView();
    }
]);
//# sourceMappingURL=cart.controller.js.map
angular.module("cartApp").controller("completeCustomerController", [
    '$scope',
    '$rootScope',
    function ($scope, $rootScope) {
        $scope.submit = function () {
            $rootScope.$broadcast('onCustomerCompleted', {
                name: $scope.name,
                phone: $scope.phone
            });
        };
    }
]);
//# sourceMappingURL=completeCustomer.controller.js.map
//# sourceMappingURL=cart.service.def.js.map
angular.module("cartApp").factory("cartService", [
    '$http',
    '$rootScope',
    'utils',
    function ($http, $rootScope, utils) {
        return {
            getCart: function () {
                return $http({
                    method: 'GET',
                    url: '/api/CartApi/GetCart'
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            removeCartItem: function (productId) {
                return $http({
                    method: 'DELETE',
                    url: '/api/CartApi/DeleteCartItem',
                    params: {
                        productId: productId
                    }
                }).then(function (resp) {
                    $rootScope.$broadcast('onCartChanged');
                    return resp;
                });
            },
            updateCartItem: function (productId, quantity) {
                return $http({
                    method: 'PUT',
                    url: '/api/CartApi/UpdateCartItem',
                    params: {
                        productId: productId,
                        quantity: quantity
                    }
                }).then(function (resp) {
                    $rootScope.$broadcast('onCartChanged');
                    return resp;
                });
            },
            processOrder: function (submitModel) {
                return $http({
                    method: 'POST',
                    url: '/api/CartApi/ProcessOrder',
                    data: utils.toUpperCamelCase(submitModel)
                }).then(function (resp) {
                    $rootScope.$broadcast('onCartChanged');
                    $rootScope.$broadcast('onOrdersChanged');
                    return resp;
                });
            },
            addToCart: function (productId, quantity) {
                return $http({
                    method: 'PUT',
                    url: '/api/CartApi/AddProduct',
                    params: {
                        productId: productId,
                        quantity: quantity
                    }
                }).then(function (resp) {
                    $rootScope.$broadcast('onCartChanged');
                    return resp;
                });
            }
        };
    }
]);
//# sourceMappingURL=cart.service.js.map
angular.module("common", ['productsApp']);
//# sourceMappingURL=app.js.map
angular.module("common").controller("addOrderProductController", [
    '$scope',
    '$rootScope',
    'productsService',
    function ($scope, $rootScope, productsService) {
        productsService.getProducts().then(function (products) {
            $scope.products = products;
        });
        $scope.addProduct = function () {
            $rootScope.$broadcast('onAddProduct', {
                id: $scope.orderProduct,
                quantity: $scope.quantity
            });
        };
    }
]);
//# sourceMappingURL=addOrderProduct.controller.js.map
angular.module("common").controller("orderedProductsViewController", [
    '$scope',
    '$rootScope',
    function ($scope, $rootScope) {
        $scope.getTotal = function () {
            if ($scope.orderedItems) {
                var total = 0;
                $scope.orderedItems.items.forEach(function (orderItem) {
                    var subTotal = orderItem.quantity * orderItem.price;
                    total += subTotal;
                });
                return total;
            }
        };
        $scope.removeItem = function (orderedItem) {
            var index = $scope.orderedItems.items.indexOf(orderedItem);
            $rootScope.$broadcast('onRemoveOrderedItem', $scope.orderedItems.items[index]);
            $scope.orderedItems.items.splice(index, 1);
        };
        $scope.onChangeQuantity = function (orderedItem) {
            $rootScope.$broadcast('onChangeQuantity', orderedItem);
        };
    }
]);
//# sourceMappingURL=orderedProductsView.controller.js.map
//# sourceMappingURL=utils.service.def.js.map
angular.module("common").factory("utils", [
    '$q',
    function ($q) {
        function setCase(obj, isLoweredCamelCase) {
            if (Array.isArray(obj)) {
                var newArray = [];
                obj.forEach(function (item) {
                    newArray.push(setCase(item, isLoweredCamelCase));
                });
                return newArray;
            }
            else if (typeof obj === 'object') {
                var newObj = {};
                for (var prop in obj) {
                    var camelCasedProp = (isLoweredCamelCase
                        ? prop[0].toLowerCase()
                        : prop[0].toUpperCase()) + prop.substr(1);
                    newObj[camelCasedProp] = setCase(obj[prop], isLoweredCamelCase);
                }
                return newObj;
            }
            else {
                return obj;
            }
        }
        return {
            toCamelCase: function (obj) {
                return setCase(obj, true);
            },
            toUpperCamelCase: function (obj) {
                return setCase(obj, false);
            }
        };
    }
]);
//# sourceMappingURL=utils.service.js.map
angular.module("layoutApp", ['cartApp', 'ordersApp']);
//# sourceMappingURL=app.js.map
angular.module("layoutApp").controller("layoutController", [
    '$scope',
    'cartService',
    'ordersService',
    function ($scope, cartService, ordersService) {
        $scope.layout = {};
        function initCartItemsAmount() {
            cartService.getCart().then(function (cart) {
                $scope.layout.cartItemsAmount = cart.items.length;
            });
        }
        function initActiveOrdersAmount() {
            ordersService.getOrders().then(function (orders) {
                $scope.layout.activeOrdersAmount = orders.filter(function (order) {
                    return order.status === 'Pending';
                }).length;
            });
        }
        initCartItemsAmount();
        initActiveOrdersAmount();
        $scope.$on('onCartChanged', initCartItemsAmount);
        $scope.$on('onOrdersChanged', initActiveOrdersAmount);
    }
]);
//# sourceMappingURL=layout.controller.js.map
angular.module("ordersApp", ['layoutApp', 'common', 'productsApp']);
//# sourceMappingURL=app.js.map
angular.module("ordersApp").controller("ordersDetailsController", [
    '$scope',
    '$rootScope',
    '$timeout',
    'ordersService',
    function ($scope, $rootScope, $timeout, ordersService) {
        $scope.layout.activePage = 'orders';
        function initOrderItemsView() {
            ordersService.getOrder($scope.orderId).then(function (order) {
                $scope.order = order;
                $scope.orderedItems = order;
                $scope.orderedItems.readonly = order.status === 'Processed';
            });
        }
        $scope.completeOrder = function () {
            ordersService.completeOrder($scope.orderId).then(initOrderItemsView);
        };
        $scope.$on('onAddProduct', function (arg, item) {
            ordersService.addProduct($scope.orderId, item.id, item.quantity).then(initOrderItemsView);
        });
        $scope.$on('onRemoveOrderedItem', function (arg, item) {
            ordersService.deleteProduct($scope.orderId, item.productId).then(initOrderItemsView);
        });
        $scope.$on('onChangeQuantity', function (arg, item) {
            ordersService.updateProduct($scope.orderId, item.productId, item.quantity);
        });
        $timeout(initOrderItemsView);
    }
]);
//# sourceMappingURL=orderDetails.controller.js.map
angular.module("ordersApp").controller("ordersViewController", [
    '$scope',
    '$rootScope',
    'ordersService',
    function ($scope, $rootScope, ordersService) {
        $scope.layout.activePage = 'orders';
        function initOrders() {
            ordersService.getOrders().then(function (orders) {
                $scope.orders = orders;
            });
        }
        $scope.deleteOrder = function (orderId) {
            ordersService.deleteOrder(orderId).then(initOrders);
        };
        $scope.getProductsCount = function (order) {
            var count = 0;
            order.items.forEach(function (item) {
                count += item.quantity;
            });
            return count;
        };
        initOrders();
    }
]);
//# sourceMappingURL=ordersView.controller.js.map
//# sourceMappingURL=ordersService.def.js.map
angular.module("ordersApp").factory("ordersService", [
    '$q',
    '$http',
    '$rootScope',
    'utils',
    function ($q, $http, $rootScope, utils) {
        return {
            getOrders: function () {
                return $http({
                    method: 'GET',
                    url: '/api/OrdersApi/GetOrders'
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            getOrder: function (orderId) {
                return $http({
                    method: 'GET',
                    url: '/api/OrdersApi/GetOrder/' + orderId
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            deleteOrder: function (orderId) {
                return $http({
                    method: 'DELETE',
                    url: '/api/OrdersApi/DeleteOrder/' + orderId
                }).then(function (resp) {
                    $rootScope.$broadcast('onOrdersChanged');
                    return utils.toCamelCase(resp.data);
                });
            },
            completeOrder: function (orderId) {
                return $http({
                    method: 'PUT',
                    url: '/api/OrdersApi/CompleteOrder/' + orderId
                }).then(function (resp) {
                    $rootScope.$broadcast('onOrdersChanged');
                    return utils.toCamelCase(resp.data);
                });
            },
            addProduct: function (orderId, productId, quantity) {
                return $http({
                    method: 'PUT',
                    url: '/api/OrdersApi/AddProduct',
                    params: {
                        orderId: orderId,
                        productId: productId,
                        quantity: quantity
                    }
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            updateProduct: function (orderId, productId, quantity) {
                return $http({
                    method: 'PUT',
                    url: '/api/OrdersApi/UpdateProduct',
                    params: {
                        orderId: orderId,
                        productId: productId,
                        quantity: quantity
                    }
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            deleteProduct: function (orderId, productId) {
                return $http({
                    method: 'DELETE',
                    url: '/api/OrdersApi/DeleteProduct',
                    params: {
                        orderId: orderId,
                        productId: productId
                    }
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            }
        };
    }
]);
//# sourceMappingURL=ordersService.js.map
angular.module("productsApp", ['layoutApp', 'common']);
//# sourceMappingURL=app.js.map
angular.module("productsApp").controller("manageProductController", [
    '$scope',
    '$rootScope',
    'productsService',
    function ($scope, $rootScope, productsService) {
        function initEditing(productId) {
            $scope.actionTitle = 'Edit product';
            productsService.getProduct(productId).then(function (product) {
                $scope.product = product;
            });
        }
        function initCreation() {
            $scope.product = {};
            $scope.actionTitle = 'Create product';
        }
        $scope.$on('onProductManage', function (ignore, data) {
            if (data && data.productId) {
                initEditing(data.productId);
            }
            else {
                initCreation();
            }
        });
        $scope.saveProduct = function () {
            if ($scope.product.id) {
                productsService.editProduct($scope.product).then(function () {
                    $('#manageProductModal').modal('toggle');
                });
            }
            else {
                productsService.createProduct($scope.product).then(function (id) {
                    $('#manageProductModal').modal('toggle');
                });
            }
            $rootScope.$broadcast('onProductsChange');
        };
    }
]);
//# sourceMappingURL=manageProduct.controller.js.map
angular.module("productsApp").controller("productsViewController", [
    '$scope',
    '$rootScope',
    'productsService',
    'cartService',
    function ($scope, $rootScope, productsService, cartService) {
        $scope.layout.activePage = 'products';
        function initProducts() {
            productsService.getProducts().then(function (products) {
                $scope.products = products;
            });
        }
        $scope.createProduct = function () {
            $rootScope.$broadcast('onProductManage');
        };
        $scope.editProduct = function (productId) {
            $rootScope.$broadcast('onProductManage', { productId: productId });
        };
        $scope.deleteProduct = function (productId) {
            productsService.deleteProduct(productId).then(function () {
                $rootScope.$broadcast('onProductsChange');
            });
        };
        $scope.addToCart = function (productId) {
            cartService.addToCart(productId);
        };
        $scope.$on('onProductsChange', function () {
            initProducts();
        });
        initProducts();
    }
]);
//# sourceMappingURL=productsView.controller.js.map
//# sourceMappingURL=products.service.def.js.map
angular.module("productsApp").factory("productsService", [
    '$http',
    'utils',
    function ($http, utils) {
        return {
            getProducts: function () {
                return $http({
                    method: 'GET',
                    url: '/api/ProductsApi/GetProducts'
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            getProduct: function (productId) {
                return $http({
                    method: 'GET',
                    url: '/api/ProductsApi/GetProduct/' + productId
                }).then(function (resp) {
                    return utils.toCamelCase(resp.data);
                });
            },
            editProduct: function (product) {
                return $http({
                    method: 'PUT',
                    url: '/api/ProductsApi/EditProduct',
                    data: utils.toUpperCamelCase(product)
                });
            },
            createProduct: function (product) {
                return $http({
                    method: 'POST',
                    url: '/api/ProductsApi/CreateProduct',
                    data: utils.toUpperCamelCase(product)
                });
            },
            deleteProduct: function (productId) {
                return $http({
                    method: 'DELETE',
                    url: '/api/ProductsApi/DeleteProduct/' + productId
                });
            }
        };
    }
]);
//# sourceMappingURL=products.service.js.map